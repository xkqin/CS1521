Script started on Tue 10 Nov 2015 03:22:03 PM CST
[4makka[24m:[1m~/CS1521/projects/project5[0m% pwd
/home/csugrads/qinxx215/CS1521/projects/project5
[4makka[24m:[1m~/CS1521/projects/project5[0m% ls -l
total 76
drwxrwxr-x 3 qinxx215 qinxx215 4096 Nov 10 15:21 build
-rw-rw-r-- 1 qinxx215 qinxx215  164 Nov  3 15:41 CMakeLists.txt
-rw-rw-r-- 1 qinxx215 qinxx215 3284 Nov 10 15:17 Disc.cpp
-rw-rw-r-- 1 qinxx215 qinxx215 3276 Nov 10 14:59 Disc.cpp~
-rw-rw-r-- 1 qinxx215 qinxx215 2685 Nov  9 22:25 Disc.h
-rw-rw-r-- 1 qinxx215 qinxx215 1749 Nov 10 15:08 DiscList.cpp
-rw-rw-r-- 1 qinxx215 qinxx215 1749 Nov 10 14:44 DiscList.cpp~
-rw-rw-r-- 1 qinxx215 qinxx215 1307 Nov  9 22:25 DiscList.h
-rw-rw-r-- 1 qinxx215 qinxx215 4135 Oct 27 20:20 LinkedList.cpp
-rw-rw-r-- 1 qinxx215 qinxx215  872 Oct 27 14:37 LinkedList.h
-rw-rw-r-- 1 qinxx215 qinxx215 2719 Oct 27 14:39 ListInterface.h
-rw-rw-r-- 1 qinxx215 qinxx215 2735 Nov  9 15:46 main.cpp
-rw-rw-r-- 1 qinxx215 qinxx215  775 Nov  3 15:09 Node.cpp
-rw-rw-r-- 1 qinxx215 qinxx215  424 Nov  3 15:09 Node.h
-rw-rw-r-- 1 qinxx215 qinxx215  211 Nov  3 15:10 PrecondViolatedExcep.cpp
-rw-rw-r-- 1 qinxx215 qinxx215  470 Nov  3 15:10 PrecondViolatedExcep.h
-rw-rw-r-- 1 qinxx215 qinxx215 1668 Nov  9 15:58 Track.cpp
-rw-rw-r-- 1 qinxx215 qinxx215 1109 Nov  9 22:22 Track.h
-rw-rw-r-- 1 qinxx215 qinxx215    0 Nov 10 15:22 typescript
[4makka[24m:[1m~/CS1521/projects/project5[0m% car -n CMakeLists.txt 
car: Command not found.
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n CMakeLists.txt 
     1	project(project5)
     2	set (CMAKE_CXX_FLAGS "${CAMKE_CXX_FLAGS} -Wall -std=c++11")
     3	add_executable(test Disc.cpp main.cpp DiscList.cpp Track.cpp PrecondViolatedExcep.cpp)[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n main.cpp 
     1	#include <iostream>
     2	
     3	
     4	#include <string>
     5	#include "DiscList.h"
     6	using namespace std;
     7	int main()
     8	{
     9	
    10	  char ans;
    11	  DiscList* listPtr = new DiscList();
    12	  Disc* newDisc;
    13	  do{
    14	  cout << "(A)dd a new disc." << endl;
    15	  cout << "(R)emove an disc." << endl;
    16	  cout << "(P)rint an disc." << endl;
    17	  cout << "(L)ist discs." << endl;
    18	  cout << "(Q)uit" << endl;
    19	  cout << "Enter A CAPITAL letter please ! " << endl;  
    20	  cin >> ans;
    21	  cout << endl;
    22	  cout << endl;
    23	  ans = toupper(ans);
    24	  switch (ans)
    25	    {
    26	      
    27	    case 'A':
    28	    case'a':
    29	      {
    30		newDisc = new Disc();
    31		newDisc -> readDisc();
    32	        listPtr -> insertDisc(newDisc);
    33		cout << endl
    34		     << endl;
    35		cout << "You have already insert!!" << endl;
    36		cout << endl
    37		     << endl;
    38	      }
    39	      break;
    40	    case'r':
    41	    case 'R':
    42	      {
    43		try{
    44		  int number;
    45		  cout << "Ther are(is) " << listPtr -> getNumberOfDiscs() << " discs in the list" 
    46		       << endl;
    47		  for(int i=1; i <= listPtr -> getNumberOfDiscs(); ++i)
    48		    {
    49		      cout <<"The " << i << " disc is " 
    50			   << (listPtr ->retrieveDisc(i)) -> getTitle() << endl;
    51		    }
    52		  cout << "Which number of disc you want to remove? " << endl;
    53		  cin >> number;
    54		  if(listPtr -> removeDisc( listPtr -> retrieveDisc( number )))
    55		    {
    56		      cout << "Already remove !" << endl;
    57		      cout << endl
    58			   << endl;	
    59		    }
    60		  else
    61		    {
    62		      cout << "Can't remove !" << endl;
    63		      cout << endl
    64			   << endl;
    65		    }
    66		}
    67	      
    68	      catch (PrecondViolatedExcep& e){
    69		cerr << "Error :"
    70		     << e.what()
    71		     << endl;
    72	      }
    73	      }
    74	      break;
    75	    case'p':
    76	    case 'P':
    77	      {
    78		try{
    79		  if(listPtr -> getNumberOfDiscs() == 0)
    80		    {
    81		      cout << "It is empty!" << endl;
    82		      cout << endl;
    83		    }
    84		  
    85		  for(int i=1; i<= listPtr -> getNumberOfDiscs(); ++i)
    86		    {
    87		      cout << "No." << i << " Disc " 
    88			   << endl
    89			   << endl;
    90		      (listPtr -> retrieveDisc(i)) -> printDisc();
    91		      cout << endl
    92			   << endl
    93			   << endl;
    94		    }
    95		}
    96		catch (PrecondViolatedExcep& e){
    97		  cerr << "Error :"
    98		       << e.what()
    99		       << endl;
   100		}
   101	
   102	      }
   103	      break;
   104	    case'l':
   105	    case 'L':
   106	      {
   107		try{
   108		  if(listPtr -> getNumberOfDiscs() == 0)
   109		    {
   110		      cout << "It is empty!" << endl;
   111		      cout << endl;
   112		    }
   113		  for(int i=1; i <= listPtr -> getNumberOfDiscs(); ++i)
   114		    {
   115		      cout <<"The " << i << " disc is " 
   116			   << (listPtr ->retrieveDisc(i)) -> getTitle() << endl;
   117		    }
   118		}
   119		catch (PrecondViolatedExcep& e){
   120		  cerr << "Error :"
   121		       << e.what()
   122		       << endl;
   123		}
   124	      }
   125	      break;
   126	    case'q':
   127	    case 'Q':
   128	      {
   129		cout << "See you!!!" << endl
   130		     << endl;
   131	      }
   132	      break;
   133	    default:
   134	      cout << "You enter a wrong letter please enter again" << endl;
   135	      break;
   136	    }
   137	  }while(ans != 'Q' );
   138	}
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n T
Track.cpp  Track.h    
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n Track.h
     1	#ifndef _TRACK
     2	#define _TRACK
     3	
     4	#include <iostream>
     5	#include <string>
     6	
     7	#include "LinkedList.h"
     8	class Disc;
     9	/** @class Track Track.h "Track.h"
    10	 *
    11	 *  Definition of SetInterface class  */
    12	
    13	class Track
    14	{
    15	 private:
    16	  string name;
    17	  string artist;
    18	  int playTime;
    19	  int number;
    20	  string location;
    21	  Disc *discPtr;
    22	  int readPlayTime(int minutes, int seconds);
    23	  Track();
    24	 public:
    25	  /** Consructor. */
    26	  Track(Disc *discPtr);
    27	  /** read the Tack from user.*/
    28	  void readTrack();
    29	  /** print the Track that user insert.*/
    30	  void printTrack() const;
    31	  /** judge if the pointer in class is less than the 
    32	   *  pointer passed in
    33	   *
    34	   *  @pre the poiter passed in must be the same as the class itself.
    35	   *  
    36	   *  @post if successful, the pointer in class is less than 
    37	   *  the pointer passed in
    38	   *
    39	   *  @return True if it is less than. */
    40	  bool isLessThan(const Track* aTrack) const;
    41	  /** get the number of Track
    42	   *
    43	   *  return the number of the Track. */
    44	  int getNumber() const;
    45	  /** get the playtime of the track.
    46	   *
    47	   *  @return the playtime of the track. */
    48	  int getPlayTime() const;
    49	};
    50	
    51	#endif
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n T
Track.cpp  Track.h    
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n Track.cpp
     1	#include "Track.h"
     2	#include "Disc.h"
     3	#include <iostream>
     4	#include <string>
     5	using namespace std;
     6	Track::Track()
     7	  :number(0)
     8	{
     9	}
    10	Track::Track(Disc* discPtr)
    11	{
    12	  this ->discPtr = discPtr;
    13	  //  this->printTrack() 
    14	  // printTrack()
    15	}
    16	int Track::readPlayTime(int minutes, int seconds)
    17	{
    18	  // int index = time.find_first_of(':');
    19	  return minutes*60+seconds;// (((int)substr(0,index))*60 + ((int)substr(index+1,time.length()-index)));
    20	}
    21	  
    22	void Track::readTrack()
    23	{
    24	  cout << "Enter the Track name" << endl;
    25	  cin >> name;
    26	  if(discPtr -> isMutiArtist())
    27	    {
    28	      cout << "Enter the artist name " << endl;
    29	      cin >> artist;
    30	    }
    31	  else
    32	    {
    33	      artist = discPtr ->getArtist();
    34	    }
    35	  char ans;
    36	  int minutes,seconds;
    37	  cout << "Enter the time as type of minutes:seconds" << endl;
    38	  cin >> minutes >> ans >> seconds;
    39	  playTime = readPlayTime(minutes,seconds);
    40	  cout << "Enter the location that you want stored" << endl;
    41	  cin >> location;
    42	  number = discPtr -> getNumberOfTracks() + 1;
    43	}
    44	
    45	void Track::printTrack() const
    46	{
    47	  cout << "No." << number << " Track's name is" << name << endl;
    48	  if(discPtr->isMutiArtist())
    49	    {
    50	      cout << "No." << number << " Track's artist name is " << artist << endl;
    51	    }
    52	  cout << "No." << number << " Track's Play time is " << playTime/60 << ":" 
    53	       << playTime%60 << endl;
    54	  cout << "No." << number << " Track's location is: " << location;
    55	}
    56	
    57	
    58	bool Track::isLessThan( const Track* aTrack) const
    59	{
    60	  bool isLess = false;
    61	  if(number < (aTrack -> getNumber()))
    62	    {
    63	      isLess = true;
    64	    }
    65	  return isLess;
    66	}
    67	
    68	int Track::getNumber() const
    69	{
    70	  return number;
    71	}
    72	
    73	int Track::getPlayTime() const
    74	{
    75	  return playTime;
    76	}
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n D
Disc.cpp~      Disc.cpp       Disc.h         DiscList.cpp~  DiscList.cpp   DiscList.h 
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n Disc.h
     1	#ifndef _DISC
     2	#define _DISC
     3	
     4	#include <iostream>
     5	#include <string>
     6	#include "Track.h"
     7	#include "LinkedList.h"
     8	
     9	
    10	/** @class Track Track.h "Track.h"
    11	 *
    12	 *  Definition of SetInterface class  */
    13	class Disc
    14	{
    15	 private:
    16	  string title;
    17	  string artist;
    18	  int year;
    19	  string genre;
    20	  int totalPlayTime;
    21	  bool mutiArtist;
    22	  LinkedList<Track*>* trackListPtr;
    23	 public:
    24	  /** constructor*/
    25	  Disc();
    26	  /** Disctructor */
    27	  ~Disc();
    28	  /** judge if it is empty
    29	   *
    30	   *  @return if the Disc is empty. */
    31	  bool isEmpty() const;
    32	  /** Get the number of track 
    33	   *
    34	   *  @return the number of the track. */
    35	  int getNumberOfTracks() const;
    36	  /** Insert the Track 
    37	   * 
    38	   *  @pre the pointer must be a Track pointer
    39	   *
    40	   *  @post If successful, the Track will be inseted in to the Disc
    41	   *
    42	   *  @return True if insert successful. */
    43	  bool insertTrack( Track* trackPtr);
    44	  /** Remove the Track 
    45	   * 
    46	   *  @pre the pointer must be a Track pointer
    47	   *
    48	   *  @post If successful, the Track will be remove from the Disc
    49	   *
    50	   *  @return True if remove successful. */
    51	
    52	  bool removeTrack(const Track* trackPtr);
    53	  /** retrieve the track by number
    54	   *
    55	   *  @pre the track number must greater than 1 and less than the number of the Track
    56	   *  or it will throw an exception 
    57	   *  
    58	   *  @return the track pointer which is the number associted with the number. */
    59	  Track* retrieveTrackByNumber(const int trackNumber) const;
    60	  /** get the artist name
    61	   *
    62	   *  return the name of the artist. */
    63	  string getArtist() const;
    64	  /** get the title name
    65	   *
    66	   *  return the name of the title. */
    67	  string getTitle() const;
    68	  /** judge if it is mutiple artist
    69	   *  
    70	   *  return True if it is muti-artist. */
    71	  bool isMutiArtist() const;
    72	  /**  read the information of disc from user. */
    73	  void readDisc();
    74	  /** print the information about the disc that user entered. */
    75	  void printDisc() const;
    76	  /** add the time to the totaltime.*/
    77	  void addToTotalPlayTime(const int time);
    78	  /** judge if the pointer in class is less than the
    79	   *  pointer passed in
    80	   *
    81	   *  @pre the poiter passed in must be the same as the class itself.
    82	   *
    83	   *  @post if successful, the pointer in class is less than
    84	   *  the pointer passed in
    85	   *
    86	   *  @return True if it is less than. */
    87	
    88	  bool isLessThan(const Disc* aDisc)const;
    89	  /** judge if the pointer in class is less than of eual to
    90	   *  pointer passed in
    91	   *
    92	   *  @pre the poiter passed in must be the same as the class itself.
    93	   *
    94	   *  @post if successful, the pointer in class is less than or equal to
    95	   *  the pointer passed in
    96	   *
    97	   *  @return True if it is less than. */
    98	
    99	  bool isLessThanOrEqualTo( const Disc* aDisc) const;
   100	};
   101	#endif
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n D
Disc.cpp~      Disc.cpp       Disc.h         DiscList.cpp~  DiscList.cpp   DiscList.h 
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n Disc.cpp
     1	#include <iostream>
     2	#include <string>
     3	#include "Disc.h"
     4	#include "PrecondViolatedExcep.h"
     5	using namespace std;
     6	Disc::Disc()
     7	{
     8	  trackListPtr = new LinkedList<Track*>();
     9	}
    10	Disc::~Disc()
    11	{
    12	  trackListPtr -> clear();
    13	  delete trackListPtr;
    14	  trackListPtr = nullptr;
    15	}
    16	
    17	bool Disc::isEmpty() const
    18	{
    19	  return (trackListPtr -> isEmpty());
    20	}
    21	
    22	int Disc::getNumberOfTracks() const
    23	{
    24	  return trackListPtr -> getLength();
    25	}
    26	
    27	bool Disc::insertTrack( Track* trackPtr)
    28	{
    29	  return  trackListPtr -> insert(getNumberOfTracks()+1,trackPtr);
    30	
    31	}
    32	  
    33	bool Disc::removeTrack(const Track* trackPtr)
    34	{
    35	  bool remove = false;
    36	  for(int i=1; i <= (trackListPtr -> getLength()); ++i)
    37	    {
    38	      if(trackPtr == retrieveTrackByNumber(i))
    39		{
    40		  remove=trackListPtr -> remove(i);
    41		  break;
    42		}
    43	    }
    44	  return remove;
    45	}
    46	
    47	Track* Disc::retrieveTrackByNumber(const int trackNumber) const
    48	{
    49	  if( trackNumber > getNumberOfTracks() || trackNumber < 1 )
    50	    {
    51	      string message ="Can not retrieve the track with wrong number !";
    52	      throw PrecondViolatedExcep(message);
    53	    }
    54	  return trackListPtr -> getEntry(trackNumber);
    55	}
    56	string Disc::getArtist() const
    57	{
    58	  return artist;
    59	}
    60	string Disc::getTitle() const
    61	{
    62	  return title;
    63	}
    64	bool Disc::isMutiArtist() const
    65	{
    66	  return mutiArtist;
    67	}
    68	void Disc::readDisc()
    69	{
    70	  cout << "Enther the title of the disc " << endl;
    71	  cin >> title;
    72	  cout << "Is it the artist of the disc is mutil-artist(Y/N) " << endl;
    73	  char ans;
    74	  cin >> ans;
    75	  if(ans=='y' || ans == 'Y')
    76	    {
    77	      mutiArtist = true;
    78	    }
    79	  else if (ans == 'n' || ans == 'Y')
    80	    {
    81	      mutiArtist = false;
    82	    }
    83	  if(mutiArtist == true)
    84	    {
    85	      cout << "Enter the artist of the disc " << endl;
    86	      cin >> artist;
    87	    }
    88	  cout << "Enter the year of the disc " << endl;
    89	  cin >> year;
    90	  cout << "Enter the genre of the disc " << endl;
    91	  cin >> genre;
    92	  int count=1;
    93	  char A;
    94	  do{
    95	    Track* newTrack = new Track(this);
    96	    cout << "The "<< count << " Track of your disc " <<endl;
    97	    newTrack -> readTrack();
    98	    addToTotalPlayTime(newTrack -> getPlayTime());
    99	    if(insertTrack(newTrack))
   100	      {
   101		count++;
   102		cout << "Do you want to enter another Track (Y/N)" << endl;
   103		cin >> A;
   104	      }
   105	  }while(A == 'Y'||A == 'y');
   106	
   107	}
   108	void Disc::printDisc() const
   109	{
   110	  cout << "The title of the disc is : " << title<< endl;
   111	  if(mutiArtist)
   112	    {
   113	      cout << "The disc is made by muti-artist" << endl;
   114	    }
   115	  else cout << "The artist is : " << artist << endl;
   116	  cout << "There are " << trackListPtr -> getLength() << " Tracks" << endl;
   117	  cout << "The disc year is : " << year << endl;
   118	  cout << "The disc genre is : " << genre << endl;
   119	  cout << "The disc total play time is : " << totalPlayTime << endl;
   120	  try{
   121	    for(int i=1; i <= getNumberOfTracks(); ++i)
   122	      {
   123		retrieveTrackByNumber(i) -> printTrack();
   124	      }
   125	  }
   126	  catch (PrecondViolatedExcep& e){
   127	    cerr << "Error :"
   128		 << e.what()
   129		 << endl;
   130	  }
   131	}
   132	void Disc::addToTotalPlayTime(const int time)
   133	{
   134	  totalPlayTime += time;
   135	}
   136	bool Disc::isLessThan(const Disc* aDisc)const
   137	{
   138	  bool isle = false;
   139	  if  (title.compare(aDisc -> getTitle()) < 0)
   140	   {
   141	     isle = true;
   142	   }
   143	 return isle;
   144	}
   145	  
   146	  
   147	bool Disc::isLessThanOrEqualTo(const Disc* aDisc) const
   148	{
   149	  bool isle;
   150	  if  (title.compare(aDisc -> getTitle()) <= 0)
   151	    {
   152	      isle = true;
   153	    }
   154	  return isle;
   155	
   156	}
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n D
Disc.cpp~      Disc.cpp       Disc.h         DiscList.cpp~  DiscList.cpp   DiscList.h 
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n DiscL
DiscList.cpp~  DiscList.cpp   DiscList.h     
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n DiscList.h
     1	#ifndef _DISC_LIST
     2	#define _DISC_LIST
     3	
     4	#include <iostream>
     5	#include <string>
     6	
     7	#include "Disc.h"
     8	#include "LinkedList.h"
     9	class DiscList
    10	{
    11	 private:
    12	  LinkedList<Disc*>* discListPtr;
    13	  int findDiscPosition(Disc* discPtr) const;
    14	 public:
    15	  /** Constructor */
    16	  DiscList();
    17	  /** Disstructor */
    18	  ~DiscList();
    19	  /** judg if the Disc is empty.
    20	   *
    21	   *  @return True if the Disc is empty.*/ 
    22	  bool isEmpty() const;
    23	  /** get the number of the disc
    24	   *
    25	   *  @reutrn inr the number of the discs. */
    26	  int getNumberOfDiscs() const;
    27	  /** Insert the Disc
    28	   *
    29	   *  @pre the pointer must be a Disc pointer
    30	   *
    31	   *  @post If successful, the Track will be inseted in to the DiscList
    32	   *
    33	   *  @return True if insert successful. */
    34	
    35	  bool insertDisc( Disc* aDiscPtr);
    36	  /** Removw the Disc
    37	   *
    38	   *  @pre the pointer must be a Disc pointer
    39	   *
    40	   *  @post If successful, the Disc will be removed from the Disc List
    41	   *
    42	   *  @return True if remove successful. */
    43	
    44	  bool removeDisc(const Disc* aDiscPtr);
    45	  /** retrieve the Disc by number
    46	   *
    47	   *  @pre the disc number must greater than 1 and less than the number of the Disc
    48	   *  or it will throw an exception
    49	   *
    50	   *  @return the Disc pointer which is the number associted with the number. */
    51	
    52	  Disc* retrieveDisc(const int number) const;
    53	};
    54	
    55	#endif
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n D
Disc.cpp~      Disc.cpp       Disc.h         DiscList.cpp~  DiscList.cpp   DiscList.h 
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n DiscL
DiscList.cpp~  DiscList.cpp   DiscList.h     
[4makka[24m:[1m~/CS1521/projects/project5[0m% cat -n DiscList.cpp
     1	#include <iostream>
     2	#include <string>
     3	
     4	
     5	#include "DiscList.h"
     6	
     7	using namespace std;
     8	
     9	DiscList::DiscList()
    10	  :discListPtr(new LinkedList<Disc*>())
    11	{
    12	}  
    13	
    14	DiscList::~DiscList()
    15	{
    16	  discListPtr -> clear();
    17	  delete discListPtr;
    18	  discListPtr = nullptr;
    19	}
    20	
    21	int DiscList::findDiscPosition(Disc* discPtr) const
    22	{
    23	  int i;
    24	  for ( i=1; i <= getNumberOfDiscs(); ++i  )
    25	    {
    26	      if( retrieveDisc(i) == discPtr)
    27		{
    28		  break;
    29		}
    30	    }
    31	  return i;
    32	}
    33	bool DiscList::isEmpty() const
    34	{
    35	  return discListPtr -> isEmpty();
    36	}
    37	int DiscList::getNumberOfDiscs() const
    38	{
    39	  return discListPtr -> getLength();
    40	} 
    41	bool DiscList::insertDisc( Disc* aDiscPtr)
    42	{
    43	  bool result = false;
    44	  int count=0;
    45	  if(isEmpty())
    46	    {
    47	       discListPtr -> insert(1, aDiscPtr);
    48	       result = true;
    49	    }
    50	  else
    51	    {
    52		  if( retrieveDisc(getNumberOfDiscs()) -> isLessThan(aDiscPtr) )
    53		    {
    54		      discListPtr -> insert(getNumberOfDiscs()+1, aDiscPtr);
    55		      result = true;
    56		    }
    57		
    58		  else
    59		    {
    60		      for(int i=getNumberOfDiscs(); i >=1; --i)
    61			{
    62			  if(aDiscPtr -> isLessThan(retrieveDisc(i)))
    63			    {
    64			      count++; 
    65			    }
    66			}
    67		      discListPtr -> insert(getNumberOfDiscs()-count+1, aDiscPtr);
    68		      result = true;	      
    69		    }
    70	    }
    71	  return result;
    72	}
    73	bool DiscList::removeDisc(const Disc* aDiscPtr)
    74	{
    75	  bool remove = false;
    76	  for(int i=1; i<= getNumberOfDiscs(); ++i)
    77	    {
    78	      if (retrieveDisc(i) == aDiscPtr)
    79		{
    80		  discListPtr -> remove(i);
    81		  remove = true;
    82		  break;
    83		}
    84	    }
    85	  return remove;
    86	}
    87	Disc* DiscList::retrieveDisc(const int number) const
    88	{
    89	  if(number < 1 || number > getNumberOfDiscs())
    90	    {
    91	      string message ="Can not retrieve disc with wrong number !";
    92	      throw PrecondViolatedExcep(message);
    93	    }
    94	  return discListPtr -> getEntry(number);
    95	}
[4makka[24m:[1m~/CS1521/projects/project5[0m% cd build
[4makka[24m:[1m~/CS1521/projects/project5/build[0m% make
[ 20%] [32mBuilding CXX object CMakeFiles/test.dir/Disc.cpp.o
[0m[ 40%] [32mBuilding CXX object CMakeFiles/test.dir/main.cpp.o
[0m[ 60%] [32mBuilding CXX object CMakeFiles/test.dir/DiscList.cpp.o
[0m[ 80%] [32mBuilding CXX object CMakeFiles/test.dir/Track.cpp.o
[0m[100%] [32mBuilding CXX object CMakeFiles/test.dir/PrecondViolatedExcep.cpp.o
[0m[31m[1mLinking CXX executable test
[0m[100%] Built target test
[4makka[24m:[1m~/CS1521/projects/project5/build[0m% ./test
(A)dd a new disc.
(R)emove an disc.
(P)rint an disc.
(L)ist discs.
(Q)uit
Enter A CAPITAL letter please ! 
a


Enther the title of the disc 
abc
Is it the artist of the disc is mutil-artist(Y/N) 
mn  n
Enter the year of the disc 
2015
Enter the genre of the disc 
qwe
The 1 Track of your disc 
Enter the Track name
asd
Enter the time as type of minutes:seconds
12:12
Enter the location that you want stored
home
Do you want to enter another Track (Y/N)
n


You have already insert!!


(A)dd a new disc.
(R)emove an disc.
(P)rint an disc.
(L)ist discs.
(Q)uit
Enter A CAPITAL letter please ! 
a


Enther the title of the disc 
a
Is it the artist of the disc is mutil-artist(Y/N) 
y
Enter the artist of the disc 
qin
Enter the year of the disc 
2015
Enter the genre of the disc 
haha
The 1 Track of your disc 
Enter the Track name
xukun
Enter the artist name 
xuxu
Enter the time as type of minutes:seconds
12:12
Enter the location that you want stored
home2
Do you want to enter another Track (Y/N)
n


You have already insert!!


(A)dd a new disc.
(R)emove an disc.
(P)rint an disc.
(L)ist discs.
(Q)uit
Enter A CAPITAL letter please ! 
a


Enther the title of the disc 
bc
Is it the artist of the disc is mutil-artist(Y/N) 
n
Enter the year of the disc 
2015
Enter the genre of the disc 
haha
The 1 Track of your disc 
Enter the Track name
qiqn q
Enter the time as type of minutes:seconds
12:122
Enter the location that you want stored
home3
Do you want to enter another Track (Y/N)
n


You have already insert!!


(A)dd a new disc.
(R)emove an disc.
(P)rint an disc.
(L)ist discs.
(Q)uit
Enter A CAPITAL letter please ! 
l


The 1 disc is a
The 2 disc is abc
The 3 disc is bc
(A)dd a new disc.
(R)emove an disc.
(P)rint an disc.
(L)ist discs.
(Q)uit
Enter A CAPITAL letter please ! 
p


No.1 Disc 

The title of the disc is : a
The disc is made by muti-artist
There are 1 Tracks
The disc year is : 2015
The disc genre is : haha
The disc total play time is : 732
No.1 Track's name isxukun
No.1 Track's artist name is xuxu
No.1 Track's Play time is 12:12
No.1 Track's location is: home2


No.2 Disc 

The title of the disc is : abc
The artist is : 
There are 1 Tracks
The disc year is : 2015
The disc genre is : qwe
The disc total play time is : 732
No.1 Track's name isasd
No.1 Track's Play time is 12:12
No.1 Track's location is: home


No.3 Disc 

The title of the disc is : bc
The artist is : 
There are 1 Tracks
The disc year is : 2015
The disc genre is : haha
The disc total play time is : 842
No.1 Track's name isqiqq
No.1 Track's Play time is 14:2
No.1 Track's location is: home3


(A)dd a new disc.
(R)emove an disc.
(P)rint an disc.
(L)ist discs.
(Q)uit
Enter A CAPITAL letter please ! 
r


Ther are(is) 3 discs in the list
The 1 disc is a
The 2 disc is abc
The 3 disc is bc
Which number of disc you want to remove? 
3
Already remove !


(A)dd a new disc.
(R)emove an disc.
(P)rint an disc.
(L)ist discs.
(Q)uit
Enter A CAPITAL letter please ! 
l


The 1 disc is a
The 2 disc is abc
(A)dd a new disc.
(R)emove an disc.
(P)rint an disc.
(L)ist discs.
(Q)uit
Enter A CAPITAL letter please ! 
q


See you!!!

[4makka[24m:[1m~/CS1521/projects/project5/build[0m% exit
exit

Script done on Tue 10 Nov 2015 03:24:46 PM CST
